-- Some validation Examples: sample patterns with descriptions

Pattern:

^[01]?[- .]?(\([2-9]\d{2}\)|[2-9]\d{2})[- .]?\d{3}[- .]?\d{4}$

Validates: US phone numbers

Samples that pass:

(425) 555-0123
425-555-0123
425 555 0123
1-425-555-0123
;;

Pattern:

^(?("")("".+?""@)|(([0-9a-zA-Z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)
(?<=[0-9a-zA-Z])@))(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|
(([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+
[a-zA-Z]{2,6}))$

Validates: emails -- very tricky so it's best just to send one as confirmation

Samples that pass:

foo@www.bar.com
;;

Pattern:

^(ht|f)tp(s?)\:\/\/[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*
(:(0-9)*)*(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&amp;%\$#_]*)?$

Validates: URLs

Samples that pass: http://www.yahoo.com
;;

Pattern:

(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{8,10})$

Validates: strong password, i.e., 8-10 characters, alpha/numeric
           The special symbol sequence ?! does a "negative 
           lookbehind" to ensure that there's at least one
           numeral and at least one character. In this
           example, special characters such as # are _not_
           allowed.

Samples: fred123abx27
;;

Pattern:

(?=^.{6,}$)(?=.*\d)(?=.*\W+)(?![.\n]).*$"

Validates: strong password, i.e., 6 or more characters, at least
           one of which must be a number. The ?= does a
           "negative lookahead". Newlines are excluded.

Samples: fred 876b
;;;


Pattern:

^\d+(\.\d\d)?$

Validates: non-negative currency amount

Samples: 0.67
        18.32
        21.00
;;;

Pattern:

^(-)?\d+(\.\d\d)?$

Validates: currency, negative or positive

Samples:   0.67
         -18.32
;;

Below is a summary of special characters together with some examples. 

Character    Description
---------    -----------

\ 	     Marks the next character as a special character or escapes a literal. 
             "n" matches the character "n". "\n" matches newline character. 
             The sequence "\\" matches "\" and "\(" matches "(".

             Note: double quotes may be escaped by doubling them: "<a href=""...>"

^ 	     Matches position before first character in line or first character 
             in string.

$ 	     Matches position after last character in a line or last character 
             in string.


? 	     Matches the preceding character zero or one time.
* 	     Matches the preceding character zero or more times.
+ 	     Matches the preceding character one or more times.

. 	     Matches any single character except a newline character.

(pattern)    Matches pattern and remembers the match. The matched substring can be 
             retrieved from the resulting 
             Matches collection, using Item [0]...[n]. To match parentheses 
             characters ( ), use "\(" or "\)".

(?<name>pattern) Matches pattern and gives the match a name.

(?:pattern)  A non-capturing group
(?=...)      A positive lookahead
(?!...)      A negative lookahead
(?<=...)     A positive lookbehind .
(?<!...)     A negative lookbehind .


x|y 	Matches either x or y: "z|wood" matches "z" or "wood"; 
        "(z|w)oo" matches "zoo" or "wood".

{n} 	n is a non-negative integer. Matches exactly n times. 
        "o{2}" does not match the "o" in "Bob" but matches first 
        two o's in "foooood".

{n,} 	n is a non-negative integer. Matches at least n times: "o{2,}" 
        does not match the "o" in "Bob" and matches all the o's in "foooood." 
        "o{1,}" is equivalent to "o+". "o{0,}" is equivalent to "o*".



{n,m} 	m and n are non-negative integers. Matches at least n and at most m times: 
        "o{1,3}" matches the first three o's in "fooooood." 
        "o{0,1}" is equivalent to "o?".

[xyz] 	A character set. Matches any one of the enclosed characters: 
        "[abc]" matches the "a" in "plain".

[^xyz] 	A negative character set. Matches any character not enclosed: 
        "[^abc]" matches the "p" in "plain".



[a-z] 	A range of characters. Matches any character in the specified range: 
        "[a-z]" matches any lowercase alphabetic character in the range "a" through "z".

[^m-z] 	A negative range characters. Matches any character not in the specified range: 
        "[m-z]" matches any character not in the range "m" through "z".

\b 	Matches a word boundary, that is, the position between a word and a space: 
        "er\b" matches the "er" in "never" but not the "er" in "verb".

\B 	Matches a non-word boundary. "ea*r\B" matches the "ear" in "never early".

\d 	Matches a digit character. Equivalent to [0-9].
\D 	Matches a non-digit character. Equivalent to [^0-9].


\f 	Matches a form-feed character.
\k 	A back-reference to a named group.

\n 	Matches a newline character.
\r 	Matches a carriage return character.

\s 	Matches any white space including space, tab, form-feed, etc. 
        Equivalent to "[ \f\n\r\t\v]".
\S 	Matches any nonwhite space character. Equivalent to "[^ \f\n\r\t\v]".

\t 	Matches a tab character.
\v 	Matches a vertical tab character.
\w 	Matches any word character including underscore: "[A-Za-z0-9_]".
\W 	Matches any non-word character: "[^A-Za-z0-9_]".

\num 	Matches num, where num is positive. Reference back to remembered matches. 
        For example, "(.)\1" matches two consecutive identical characters.

\n 	Matches n, where n is an octal escape value. Octal escape values must be 
        1, 2, or 3 digits long. 
        "\11" and "\011" both match a tab character. "\0011" is the equivalent to
        "\001" & "1". 
        Octal escape values must not exceed 256. If they do, only first two digits 
        comprise the expression. 
        Allows ASCII codes to be used in regular expressions.

\xn 	Matches n, where n is a hexadecimal escape value. Hexadecimal escape values 
        must be exactly two digits long. 
        "\x41" matches "A". "\x041" is same as "\x04" & "1". Allows ASCII codes 
        to be used in regular expressions.


\un 	Matches a Unicode character expressed in hexadecimal notation with exactly 
        four numeric digits.  "\u0200" matches a space character.

\A 	Matches the position before the first character in a string. Not affected -
        by the MultiLine setting

\Z 	Matches the position after the last character of a string. 
        Not affected by the MultiLine setting.

\G 	Specifies that the matches must be consecutive, without any intervening 
        non-matching characters. 

